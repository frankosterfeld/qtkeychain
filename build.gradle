buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.1.1"
    }
}

apply plugin: 'base'
apply plugin: 'ivy-publish'
apply plugin: 'project-report'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'com.jfrog.artifactory'

import org.apache.tools.ant.taskdefs.condition.Os
def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: '0'
def version = '0.7.0-'+jenkinsBuild
def packagesDir = "$projectDir/Packages"


ext {
    useExternalIvy = project.hasProperty('use_external_ivy') ? use_external_ivy : 'true'
    group 'com.qlik'
    status version.contains('-') ? 'integration' : 'release'
    setQt5Core = '/lib/cmake/Qt5Core/'
    setQt5LinguistTools = '/lib/cmake/Qt5LinguistTools/'
}

def universalLibrary(){ 
    exec {
         commandLine 'lipo', '-create', 'build-device/libqt5keychain_device.a', 'build-simulator/libqt5keychain_simulator.a', '-output', 'lib/libqt5keychain_ios.a'
    }
    exec { 
         commandLine 'mv', 'build-osx/libqt5keychain.a', 'lib/libqt5keychain_macos.a' 
    }    
    exec {
          commandLine 'cp', 'keychain.h', 'include/keychain.h'
    }
    exec {
          commandLine 'cp', 'build-device/qkeychain_export.h', 'include/qkeychain_export.h'
    }
    return "done"
}


def compileCodeMacOS(){ 
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/clang_64' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/clang_64' + setQt5LinguistTools
        workingDir = "build-osx"
      	commandLine 'cmake', RUN_DIR, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true"
        }
    exec {
        workingDir = "build-osx"
        commandLine 'make'
        }
}

def compileCodeIOSdevice(){ 
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/ios' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/ios' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/iOS.cmake"
        workingDir = "build-device"
      	commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true", "-DIOS_PLATFORM=OS", "-DIOS=true"
        }
    exec {
        workingDir = "build-device"
        commandLine 'make'
        }
    exec { 
        commandLine 'mv', 'build-device/libqt5keychain.a', 'build-device/libqt5keychain_device.a' 
        }
}

def compileCodeIOSsimulator(){ 
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/ios' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/ios' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/iOS.cmake"
        workingDir = "build-simulator"
      	commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true", "-DIOS_PLATFORM=SIMULATOR64", "-DIOS=true"
        }
    exec {
        workingDir = "build-simulator"
        commandLine 'make'
        }
    exec { 
        commandLine 'mv', 'build-simulator/libqt5keychain.a', 'build-simulator/libqt5keychain_simulator.a' 
        }
        
}


task buildOsx {
    def buildDirBase = new File("$projectDir/build-osx/")
    buildDirBase.mkdirs()
	doLast {
    	compileCodeMacOS()
    }
}

task buildDevice{
    def buildDirBase = new File("$projectDir/build-device/")
    buildDirBase.mkdirs()
    doLast {
    	compileCodeIOSdevice()
    }
}

task buildSimulator {
    def buildDirBase = new File("$projectDir/build-simulator/")
    buildDirBase.mkdirs()
    doLast {
    	compileCodeIOSsimulator()
    }
}


task copyLib{
    def libDirBase = new File("$projectDir/lib/")
    libDirBase.mkdirs()
    def includeDirBase = new File("$projectDir/include/")
    includeDirBase.mkdirs()
    doFirst {
        universalLibrary()
    }
}

task packageLib(type: Zip) {
    destinationDir = new File("dist")
    archiveName "qtkeychain-"+version+".zip"
    into('qtkeychain') {
        from "lib"
        include '**/*'
    }
    from ("include"){
        into "qtkeychain/include"
    }
}

//Enables publishing of the component artifact to the Ivy repo qlik-dev-local.
publishing {
    publications {
        ivy(IvyPublication) {
            revision = version
            artifact(packageLib){
                conf 'compile'
            }
            module ('qtkeychain')
            descriptor.status status
            configurations {
                compile {}
            }          
        }
    }
    repositories {
        ivy {
            name 'shared'
            url "${artifactory_contextUrl}/qlik-dev-local"
            credentials {
                username artifactory_user
                password artifactory_password
            }
            layout 'pattern', {
                ivy '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
                artifact '[organization]/[module]/[revision]/[type]s/[module](-[classifier])-[revision].[ext]'
                m2compatible = false

            }
        }
        ivy {
            name 'local'
            url project.hasProperty('localIvyHome') ? localIvyHome :  "${System.getProperty('user.home')}/ivylocal"
            layout 'pattern', {
                ivy '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
                artifact '[organization]/[module]/[revision]/[type]s/[module](-[classifier])-[revision].[ext]'
                m2compatible = false

            }
        }
    }
}

task install {
    group 'Publishing'
    description 'Installs (local publish) all publications produced by this project.'
    dependsOn 'publishIvyPublicationToLocalRepository'
}

task upload {
    group 'Publishing'
    description 'Publish (remote publish) all publications produced by this project.'
    dependsOn 'publishIvyPublicationToSharedRepository'
}

