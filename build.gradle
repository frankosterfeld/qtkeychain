buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath 'com.qlik:gradle-local-ivy:1.0.11'
    }
}

apply plugin: 'base'
apply plugin: 'ivy-publish'
apply plugin: 'project-report'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'com.jfrog.artifactory'

import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.taskdefs.condition.Os
def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: '0'
def version = '1.0.0-'+jenkinsBuild
def packagesDir = "$projectDir/Packages"

ext {
    useExternalIvy = project.hasProperty('use_external_ivy') ? use_external_ivy : 'true'
    group 'com.qlik'
    status version.contains('-') ? 'integration' : 'release'
    setQt5Core = '/lib/cmake/Qt5Core/'
    setQt5LinguistTools = '/lib/cmake/Qt5LinguistTools/'
    androidNdkRoot = System.getenv("ANDROID_NDK_ROOT") ?: ""
    gitRepo = Grgit.open(projectDir)
    commitId = gitRepo.head().id
    branchName = project.hasProperty('branchName') ? branchName : gitRepo.branch.current.name
    remoteUrl = grgit ? grgit.remote.list().find { it.name == 'origin' }.url : ""
    publishAndroid = project.hasProperty('publish_android') ? publish_android : false
    publishIos = project.hasProperty('publish_ios') ? publish_ios : true
    useTimestamp = project.hasProperty('use_timestamp') ? use_timestamp : false
}

if (useTimestamp){
    def timestamp = new Date().format('yyyyMMddHHmmss')
    version += "-${timestamp}"
}

def universalLibrary(){
    exec {
        commandLine 'lipo', '-create', 'build-device/libqt5keychain_device.a', 'build-simulator/libqt5keychain_simulator.a', '-output', 'lib/libqt5keychain_ios.a'
    }
    exec {
        commandLine 'mv', 'build-osx/libqt5keychain.a', 'lib/libqt5keychain_macos.a'
    }
    exec {
        commandLine 'cp', 'keychain.h', 'include/keychain.h'
    }
    exec {
        commandLine 'cp', 'build-device/qkeychain_export.h', 'include/qkeychain_export.h'
    }
    return "done"
}

def androidLibraryCopy() {
    exec {
        commandLine 'cp', 'build-android/libqt5keychain_android_arm7.a', 'lib/libqt5keychain_android_arm7.a'
    }
    exec {
        commandLine 'cp', 'build-androidx86/libqt5keychain_android_x86.a', 'lib/libqt5keychain_android_x86.a'
    }
    exec {
        commandLine 'cp', 'keychain.h', 'include/keychain.h'
    }
    exec {
        commandLine 'cp', 'build-android/qkeychain_export.h', 'include/qkeychain_export.h'
    }
    return "done"
}

def compileCodeMacOS(){
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/clang_64' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/clang_64' + setQt5LinguistTools
        workingDir = "build-osx"
        commandLine 'cmake', RUN_DIR, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true"
    }
    exec {
        workingDir = "build-osx"
        commandLine 'make'
    }
}

def compileCodeIOSdevice(){
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/ios' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/ios' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/iOS.cmake"
        workingDir = "build-device"
        commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true", "-DIOS_PLATFORM=OS", "-DIOS=true"
    }
    exec {
        workingDir = "build-device"
        commandLine 'make'
    }
    exec {
        commandLine 'mv', 'build-device/libqt5keychain.a', 'build-device/libqt5keychain_device.a'
    }
}

def compileCodeAndroid(){
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/android_armv7' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/android_armv7' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/android.toolchain.cmake"
        def Qt5AndroidExtras_DIR = '-DQt5AndroidExtras_DIR=' + qt_core + '/android_armv7/lib/cmake/Qt5AndroidExtras/'

        workingDir = "build-android"
        commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, Qt5AndroidExtras_DIR,
                "-DQTKEYCHAIN_STATIC=true", "-DANDROID_NDK=${androidNdkRoot}", "-DCMAKE_MAKE_PROGRAM=make"
    }
    exec {
        workingDir = "build-android"
        commandLine 'make'
    }
    exec {
        commandLine 'mv', 'build-android/libqt5keychain.a', 'build-android/libqt5keychain_android_arm7.a'
    }
}

def compileCodeAndroidx86(){
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/android_x86' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/android_x86' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/android.toolchain.cmake"
        def Qt5AndroidExtras_DIR = '-DQt5AndroidExtras_DIR=' + qt_core + '/android_x86/lib/cmake/Qt5AndroidExtras/'

        workingDir = "build-androidx86"
        commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, Qt5AndroidExtras_DIR,
                "-DQTKEYCHAIN_STATIC=true", "-DANDROID_NDK=${androidNdkRoot}", "-DCMAKE_MAKE_PROGRAM=make", "-DANDROID_ABI=x86", "-DANDROID_TOOLCHAIN_NAME=x86-4.9"
    }
    exec {
        workingDir = "build-androidx86"
        commandLine 'make'
    }
    exec {
        commandLine 'mv', 'build-androidx86/libqt5keychain.a', 'build-androidx86/libqt5keychain_android_x86.a'
    }
}

def compileCodeIOSsimulator(){
    exec {
        def RUN_DIR = '..'
        def Qt5Core_DIR =  '-DQt5Core_DIR=' + qt_core + '/ios' + setQt5Core
        def Qt5LinguistTools_DIR = '-DQt5LinguistTools_DIR=' + qt_core + '/ios' + setQt5LinguistTools
        def CMAKE_TOOLCHAIN_FILE = '-DCMAKE_TOOLCHAIN_FILE=' + "$projectDir" + "/cmake/iOS.cmake"
        workingDir = "build-simulator"
        commandLine 'cmake', RUN_DIR, CMAKE_TOOLCHAIN_FILE, Qt5Core_DIR, Qt5LinguistTools_DIR, "-DQTKEYCHAIN_STATIC=true", "-DIOS_PLATFORM=SIMULATOR64", "-DIOS=true"
    }
    exec {
        workingDir = "build-simulator"
        commandLine 'make'
    }
    exec {
        commandLine 'mv', 'build-simulator/libqt5keychain.a', 'build-simulator/libqt5keychain_simulator.a'
    }

}

task buildOsx {
    def buildDirBase = new File("$projectDir/build-osx/")
    buildDirBase.mkdirs()
    doLast {
        compileCodeMacOS()
    }
}

task buildDevice{
    def buildDirBase = new File("$projectDir/build-device/")
    buildDirBase.mkdirs()
    doLast {
        compileCodeIOSdevice()
    }
}

task buildSimulator {
    def buildDirBase = new File("$projectDir/build-simulator/")
    buildDirBase.mkdirs()
    doLast {
        compileCodeIOSsimulator()
    }
}

task buildAndroid {
    def buildDirBase = new File("$projectDir/build-android/")
    buildDirBase.mkdirs()
    doLast {
        compileCodeAndroid()
    }
}

task buildAndroidx86 {
    def buildDirBase = new File("$projectDir/build-androidx86/")
    buildDirBase.mkdirs()
    doLast {
        compileCodeAndroidx86()
    }
}

task copyLib{
    def libDirBase = new File("$projectDir/lib/")
    libDirBase.mkdirs()
    def includeDirBase = new File("$projectDir/include/")
    includeDirBase.mkdirs()
    doFirst {
        universalLibrary()
    }
}

task copyLibAndroid{
    def libDirBase = new File("$projectDir/lib/")
    libDirBase.mkdirs()
    def includeDirBase = new File("$projectDir/include/")
    includeDirBase.mkdirs()
    doFirst {
        androidLibraryCopy()
    }
}

task packageLib(type: Zip) {
    destinationDir = new File("dist")
    archiveName "qtkeychain-" + version + ".zip"
    into('qtkeychain') {
        from "lib"
        include '**/*'
    }
    from ("include"){
        into "qtkeychain/include"
    }
}


task packageLibAndroid(type: Zip) {
    destinationDir = new File("dist")
    archiveName "qtkeychain-android" + version + ".zip"
    into('qtkeychain') {
        from "lib"
        include '**/*'
    }
    from("include") {
        into "qtkeychain/include"
    }
}

//Enables publishing of the component artifact to the Ivy repo qlik-dev-local.
publishing {
    publications {
        ivy(IvyPublication) {
            revision = version
            if (publishIos == 'true' && publishAndroid == 'false' || publishIos == 'true' && publishAndroid == 'true'){
                module ('qtkeychain')
                artifact(packageLib){
                    conf 'compile'
                }
            } else if (publishIos == 'false' && publishAndroid == 'true'){
                module ('qtkeychain-android')
                artifact(packageLibAndroid){
                    conf 'compile'
                }
            }

            descriptor.status status
            descriptor.branch branchName
            descriptor.extraInfo 'http://www.qlik.com', 'commit', project.ext.commitId
            descriptor.extraInfo 'http://www.qlik.com', 'remoteUrl', project.ext.remoteUrl
            configurations {
                compile {}
            }
        }
    }
    repositories {
        ivy {
            name 'shared'
            url "${artifactory_contextUrl}/qlik-dev-local"
            credentials {
                username artifactory_user
                password artifactory_password
            }
            layout 'pattern', {
                ivy '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
                artifact '[organization]/[module]/[revision]/[type]s/[module](-[classifier])-[revision].[ext]'
                m2compatible = false

            }
        }
        ivy {
            name 'local'
            url project.hasProperty('localIvyHome') ? localIvyHome :  "${System.getProperty('user.home')}/ivylocal"
            layout 'pattern', {
                ivy '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
                artifact '[organization]/[module]/[revision]/[type]s/[module](-[classifier])-[revision].[ext]'
                m2compatible = false

            }
        }
    }
}

task install {
    group 'Publishing'
    description 'Installs (local publish) all publications produced by this project.'
    dependsOn 'publishIvyPublicationToLocalRepository'
}

task upload {
    group 'Publishing'
    description 'Publish (remote publish) all publications produced by this project.'
    dependsOn 'publishIvyPublicationToSharedRepository'
}

